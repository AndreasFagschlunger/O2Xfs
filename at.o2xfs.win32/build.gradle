apply plugin: 'cpp'
apply plugin: 'visual-studio'
apply plugin: 'windows-resources'

dependencies {
    compile project(':at.o2xfs.log'),
            project(':at.o2xfs.common'),
            libraries.commons_lang3
    testCompile libraries.junit
    debugDll files('build/libs/at.o2xfs.win32.dll/shared/debug/at.o2xfs.win32.dll')
    releaseDll files('build/libs/at.o2xfs.win32.dll/shared/release/at.o2xfs.win32.dll')
}

test {
    systemProperty 'java.library.path', file('build/libs/at.o2xfs.win32.dll/shared/release').absolutePath
}

model {
    buildTypes {
        debug
        release
    }

    binaries {
        all {
            if (toolChain in Gcc && buildType == buildTypes.debug) {
                cppCompiler.args "-g"
            }
            if (toolChain in VisualCpp && buildType == buildTypes.debug) {
                cppCompiler.args '/Zi'
                cppCompiler.define 'DEBUG'
                linker.args '/DEBUG'
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            jni {
                def javaHome = System.getenv('JAVA_HOME')
                if(project.hasProperty('org.gradle.java.home')) {
                    javaHome = project.getProperty('org.gradle.java.home');
                }
                headers.srcDirs "${javaHome}/include", "${javaHome}/include/win32"
            }
        }
    }

    components {
        'at.o2xfs.win32.dll'(NativeLibrarySpec) {

            binaries.all {
                lib library: "jni", linkage: "api"
                rcCompiler.args "/v"
                rcCompiler.define "FILE_VERSION=\"0.0\""
                rcCompiler.define "COMMA_VERSION=0,0,0,0"
                rcCompiler.define "ORG_FILENAME="
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'at.o2xfs'
            artifactId 'o2xfs-win32'
            version version

            from components.java

            artifact(file('build/libs/at.o2xfs.win32.dll/shared/release/at.o2xfs.win32.dll')) {
            }

            artifact sourcesJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }            
        }
    }
}

// create the javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// create the sources jar
task sourcesJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.allSource
    classifier = 'sources'
}