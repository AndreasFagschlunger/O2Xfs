/*
 * Copyright (c) 2017, Andreas Fagschlunger. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class at_o2xfs_win32_impl_Win32Buffer */

#ifndef _Included_at_o2xfs_win32_impl_Win32Buffer
#define _Included_at_o2xfs_win32_impl_Win32Buffer
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     at_o2xfs_win32_impl_Win32Buffer
 * Method:    allocate0
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_at_o2xfs_win32_impl_Win32Buffer_allocate0
  (JNIEnv *, jobject, jint);

/*
 * Class:     at_o2xfs_win32_impl_Win32Buffer
 * Method:    get0
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_at_o2xfs_win32_impl_Win32Buffer_get0
  (JNIEnv *, jobject, jbyteArray, jint);

/*
 * Class:     at_o2xfs_win32_impl_Win32Buffer
 * Method:    put0
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_at_o2xfs_win32_impl_Win32Buffer_put0
  (JNIEnv *, jobject, jbyteArray, jbyteArray);

/*
 * Class:     at_o2xfs_win32_impl_Win32Buffer
 * Method:    subBuffer0
 * Signature: ([BII)Lat/o2xfs/win32/Buffer;
 */
JNIEXPORT jobject JNICALL Java_at_o2xfs_win32_impl_Win32Buffer_subBuffer0
  (JNIEnv *, jobject, jbyteArray, jint, jint);

/*
 * Class:     at_o2xfs_win32_impl_Win32Buffer
 * Method:    free0
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_at_o2xfs_win32_impl_Win32Buffer_free0
  (JNIEnv *, jobject, jbyteArray);

#ifdef __cplusplus
}
#endif
#endif