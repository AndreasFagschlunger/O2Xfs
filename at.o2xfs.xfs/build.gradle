plugins {
    id 'jvm-component'
    id 'java-lang'
}

apply plugin: 'cpp'
apply plugin: 'windows-resources'

def findXfsSdk() {
    def xfsSdk = 'C:/Program Files (x86)/Common Files/XFS/SDK'
    if(System.getenv('XFS_SDK') != null) {
        xfsSdk = System.getenv('XFS_SDK')
    } else if(project.hasProperty('xfsSdkDir')) {
        xfsSdk = xfsSdkDir
    }
    return xfsSdk;
}

def xfsSdk = findXfsSdk()

model {
    binaries {
        withType(SharedLibraryBinarySpec) {
            if (toolChain in VisualCpp) {
                cCompiler.args "/Zi"
                cCompiler.define "DLL_EXPORT"
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            jni {
                def javaHome = System.getenv('JAVA_HOME')
                headers.srcDirs "${javaHome}/include", "${javaHome}/include/win32"
            }
            msxfs {
                headers.srcDir "${xfsSdk}/INCLUDE"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${xfsSdk}/LIB/msxfs.lib")
                }
            }
            xfs_conf {
                headers.srcDir "${xfsSdk}/INCLUDE"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${xfsSdk}/LIB/xfs_conf.lib")
                }
            }
        }
    }

    components {
        'at.o2xfs.xfs'(JvmLibrarySpec) {
            sources {
                java {
                    source.srcDir 'src/main/java'
                }
            }
            dependencies {
                project ':at.o2xfs.common'
                project ':at.o2xfs.log'
                project ':at.o2xfs.win32'
                module libraries.commons_lang3
            }
        }

        'at.o2xfs.xfs.dll'(NativeLibrarySpec) {
            binaries.all {
                lib project: ':at.o2xfs.win32', library: 'at.o2xfs.win32.dll'
                lib library: 'jni', linkage: 'api'
                lib library: 'msxfs', linkage: 'static'
                linker.args 'Gdi32.lib', 'User32.lib'
                rcCompiler.args "/v"
                rcCompiler.define "FILE_VERSION=\"0.0\""
                rcCompiler.define "COMMA_VERSION=0,0,0,0"
                rcCompiler.define "ORG_FILENAME="
            }
        }

        'at.o2xfs.xfs.conf.dll'(NativeLibrarySpec) {
            binaries.all {
                lib project: ':at.o2xfs.win32', library: 'at.o2xfs.win32.dll'
                lib library: 'jni', linkage: 'api'
                lib library: 'xfs_conf', linkage: 'static'
                rcCompiler.args "/v"
                rcCompiler.define "FILE_VERSION=\"0.0\""
                rcCompiler.define "COMMA_VERSION=0,0,0,0"
                rcCompiler.define "ORG_FILENAME="
            }
        }

        'at.o2xfs.xfs.test.dll'(NativeLibrarySpec) {
            binaries.all {
                lib project: ':at.o2xfs.win32', library: 'at.o2xfs.win32.dll'
                lib library: 'jni', linkage: 'api'
                lib library: 'msxfs', linkage: 'static'
                rcCompiler.args "/v"
                rcCompiler.define "FILE_VERSION=\"0.0\""
                rcCompiler.define "COMMA_VERSION=0,0,0,0"
                rcCompiler.define "ORG_FILENAME="
            }
        }        
    }
}